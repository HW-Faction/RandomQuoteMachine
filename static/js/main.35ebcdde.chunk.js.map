{"version":3,"sources":["App.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","generateQuote","chosenQuote","quotes","state","apiResult","randomNumber","Math","floor","random","length","forEach","element","index","push","setState","text","quote","author","changeColor","color","i","clickCount","bgColor","isLoaded","handleClick","bind","assertThisInitialized","_this2","fetch","headers","Accept","then","response","json","responseData","quotesArrayLength","catch","error","react_default","a","createElement","id","concat","href","onClick","style","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"gOAwHeA,qBApHb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAuCRQ,cAAgB,WACd,IAAMC,EAAc,GACdC,EAAST,EAAKU,MAAMC,UACtBC,EAAeC,KAAKC,MAAMD,KAAKE,SAAWf,EAAKU,MAAMC,UAAUK,QAEnEP,EAAOQ,QAAQ,SAASC,EAASC,GAC3BA,IAAUP,GACZJ,EAAYY,KAAKF,KAGrBlB,EAAKqB,SAAS,CACZC,KAAMd,EAAY,GAAGe,MACrBC,OAAQhB,EAAY,GAAGgB,UApDRxB,EAwDnByB,YAAc,WACZ,IAAMC,EAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,WACvDC,EAAI3B,EAAKU,MAAMkB,WAEnB5B,EAAKqB,SAAS,CACZO,WAAY5B,EAAKU,MAAMkB,WAAa,IAGlCD,EAAI,EACN3B,EAAKqB,SAAS,CACZQ,QAASH,EAAMC,KAERA,GAAK,EACd3B,EAAKqB,SAAS,CACZQ,QAASH,EAAMC,GACfC,WAAY,IAEC,IAAND,GACT3B,EAAKqB,SAAS,CACZO,WAAY5B,EAAKU,MAAMkB,WAAa,EACpCC,QAASH,EAAMC,MA1EnB3B,EAAKU,MAAQ,CACXC,UAAW,KACXa,OAAQ,GACRF,KAAM,GACNQ,UAAU,EACVD,QAAS,UACTD,WAAY,GAEd5B,EAAK+B,YAAc/B,EAAK+B,YAAYC,KAAjB/B,OAAAgC,EAAA,EAAAhC,CAAAD,IAVFA,6EAcjBG,KAAKI,gBACLJ,KAAKsB,0DAGa,IAAAS,EAAA/B,KAClBgC,MACE,yIACA,CACEC,QAAS,CACPC,OAAQ,sBAIXC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJP,EAAKb,SAAS,CACZV,UAAW8B,EAAahC,OACxBqB,UAAU,EACVN,OAAQiB,EAAahC,OAAO,GAAGe,OAC/BF,KAAMmB,EAAahC,OAAO,GAAGc,MAC7BmB,kBAAmBD,EAAahC,OAAOO,WAG1C2B,MAAM,SAAAC,GAAK,OAAIV,EAAKb,SAAS,CAAEuB,6CA6ClC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACNH,EAAAC,EAAAC,cAAA,kEAAAE,OAGuB9C,KAAKO,MAAMmB,QAHlC,qCAAAoB,OAIwB9C,KAAKO,MAAMmB,QAJnC,iCAQAgB,EAAAC,EAAAC,cAAA,MAAIC,GAAG,SAAP,wBACAH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,KAAGC,GAAG,QAAQ7C,KAAKO,MAAMY,MACzBuB,EAAAC,EAAAC,cAAA,KAAGC,GAAG,UAAN,MAAmB7C,KAAKO,MAAMc,QAC9BqB,EAAAC,EAAAC,cAAA,KAAGG,KAAK,mCAAmCF,GAAG,eAA9C,SAGAH,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYG,QAAShD,KAAK4B,aAArC,cAIFc,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACEG,KAAK,mDACLE,MAAO,CAAE1B,MAAO,YAFlB,+BAzGQ2B,cCElBC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.35ebcdde.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiResult: null,\n      author: \"\",\n      text: \"\",\n      isLoaded: false,\n      bgColor: \"#f99192\",\n      clickCount: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.generateQuote();\n    this.changeColor();\n  }\n\n  componentDidMount() {\n    fetch(\n      \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\",\n      {\n        headers: {\n          Accept: \"application/json\"\n        }\n      }\n    )\n      .then(response => response.json())\n      .then(responseData => {\n        this.setState({\n          apiResult: responseData.quotes,\n          isLoaded: true,\n          author: responseData.quotes[0].author,\n          text: responseData.quotes[0].quote,\n          quotesArrayLength: responseData.quotes.length\n        });\n      })\n      .catch(error => this.setState({ error }));\n  }\n\n  generateQuote = () => {\n    const chosenQuote = [];\n    const quotes = this.state.apiResult;\n    let randomNumber = Math.floor(Math.random() * this.state.apiResult.length);\n\n    quotes.forEach(function(element, index) {\n      if (index === randomNumber) {\n        chosenQuote.push(element);\n      }\n    });\n    this.setState({\n      text: chosenQuote[0].quote,\n      author: chosenQuote[0].author\n    });\n  };\n\n  changeColor = () => {\n    const color = [\"#a0855b\", \"#00bdaa\", \"#2a6171\", \"#ff00c8\", \"#76a21e\"];\n    let i = this.state.clickCount;\n\n    this.setState({\n      clickCount: this.state.clickCount + 1\n    });\n\n    if (i < 4) {\n      this.setState({\n        bgColor: color[i]\n      });\n    } else if (i >= 4) {\n      this.setState({\n        bgColor: color[i],\n        clickCount: 0\n      });\n    } else if (i === 0) {\n      this.setState({\n        clickCount: this.state.clickCount + 1,\n        bgColor: color[i]\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"main\">\n        <style>\n          {`\n          :root {\n            --main-bg-color: ${this.state.bgColor};\n            --main-txt-color: ${this.state.bgColor};\n            }\n          `}\n        </style>\n        <h1 id=\"title\">Random Quote Machine</h1>\n        <div id=\"quote-box\">\n          <p id=\"text\">{this.state.text}</p>\n          <p id=\"author\"> - {this.state.author}</p>\n          <a href=\"https://twitter.com/intent/tweet\" id=\"tweet-quote\">\n            Twitt\n          </a>\n          <button id=\"new-quote\" onClick={this.handleClick}>\n            New Quote\n          </button>\n        </div>\n        <h1>\n          <a\n            href=\"https://github.com/HW-Faction/RandomQuoteMachine\"\n            style={{ color: \"#ffffff\" }}\n          >\n            See Code on Github\n          </a>\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}